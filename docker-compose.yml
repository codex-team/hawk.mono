version: "3.2"
services:
  api:
    build:
      dockerfile: "./docker/Dockerfile.dev"
      context: ./api
    user: "node"
    volumes:
      - ./api:/usr/src/app
      - ./api/.env:/usr/src/app/.env
      - /usr/src/app/node_modules
    ports:
      - 4000:4000
    depends_on:
      - mongodb
    restart: unless-stopped
    stdin_open: true
    tty: true

  mongodb:
    image: mongo
    volumes:
      - mongodata:/data/db
      - ./dump/hawk_events:/dump/hawk_events
      - ./dump/hawk_accounts:/dump/hawk_accounts
    ports:
      - 27017:27017

  garage:
    build:
      dockerfile: Dockerfile.dev
      context: ./garage
    volumes:
      - ./garage:/app
      - /app/node_modules
    ports:
      - 8080:8080
    depends_on:
      - api

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - ./registry/config/rabbit.definitions.json:/tmp/rabbit.definitions.json:ro
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management load_definitions "/tmp/rabbit.definitions.json"

  collector:
    build: ./collector
    ports:
      - 3000:3000
    volumes:
      - ./collector/.env.docker:/app/.env
    depends_on:
      - rabbitmq
    restart: unless-stopped

  prom-pushgateway:
    image: prom/pushgateway
    ports:
      - 9091:9091

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prom/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - prom-pushgateway

  cron-manager:
    build:
      dockerfile: docker/Dockerfile.dev
      context: ./cron-manager
    depends_on:
      - rabbitmq
    restart: unless-stopped
    volumes:
      - ./cron-manager:/usr/src/app
      - /usr/src/app/node_modules


volumes:
  mongodata:
